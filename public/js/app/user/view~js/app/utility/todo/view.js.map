{"version":3,"file":"js/app/user/view~js/app/utility/todo/view.js?id=c306443f764fa8e19c31","sources":["webpack:///./resources/js/helpers/transformers.js","webpack:///./resources/js/mixins/view.js"],"sourcesContent":["import store from '@js/store'\nimport { formatCurrency } from '@core/utils'\nconst vars = store.getters['config/vars']\n\n\nexport function objectWithName({name}) {\n    return name\n}\n\nexport function contact({name}) {\n    return name\n}\n\nexport function contactWithAlias({name, alias}) {\n    return `${name} (${alias})`\n}\n\nexport function contactWithAssociation({name, association}) {\n    return `${name} (${association})`\n}\n\nexport function employee({name}) {\n    return name\n}\n\nexport function employeeWithAlias({name, alias}) {\n    return `${name} (${alias})`\n}\n\nexport function getRegion(value, item = {}) {\n    let region = item ? item.city : ''\n    region = region ? (item.zipcode ? `${region} - ${item.zipcode}` : region) : ''\n    region = item.state ? (region ? `${region}, ${item.state}` : item.state) : region\n    region = item.country ? (region ? `${region}, ${item.country.name}` : item.country.name) : region\n    return region\n}\n\nexport function percent(content) {\n    return `${content} %`\n}\n\nexport function date(content) {\n    return moment(content, vars.serverDateFormat).format(vars.defaultDateFormat)\n}\n\nexport function datetime(content) {\n    return moment(content, vars.serverDateTimeFormat).format(vars.defaultDateTimeFormat)\n}\n\nexport function truncateString(content, opts) {\n    const max = opts.max || 30\n    const suffix = content.length > max ? (opts.suffix || '...') : ''\n    return content.slice(0, max) + suffix\n}\n\nexport function limitWords(content, opts) {\n    const contentArr = content.split(' ')\n    const max = opts.max || 3\n    const suffix = contentArr.length > max ? (opts.suffix || '...') : ''\n    return contentArr.slice(0, max).join(' ') + suffix\n}\n\nexport function badgeStatus(status) {\n    return status ? 'true' : 'false'\n}\n\nexport function badgeStatusYesNo(status) {\n    return status ? $t('general.yes') : $t('general.no')\n}\n\nexport function badgeStatusLabel(status, opts) {\n    return status ? $t('general.yes') : $t('general.no')\n}\n\nexport function badgeStatusCompleted(status) {\n    return status ? $t('utility.todo.completed') : $t('utility.todo.incomplete')\n}\n\nexport function currency(value, opts) {\n    const currency = opts && opts.currency ? opts.currency : vars.defaultCurrency\n    return formatCurrency.to(value, currency, true)\n}\n\nexport function getCurrencyDescription(value, item = {}) {\n    return `${item.currency.name} - ${item.currency.description} (${item.currency.symbol})`\n}","import * as headerMixins from './header'\nimport * as transformers from '@js/helpers/transformers'\nimport { mapGetters, mapActions } from 'vuex'\nimport EventBus from '@js/event-bus'\n\nexport default {\n    components: {\n    },\n    data() {\n        return {\n            uuid: null,\n            subUuid: null,\n            entity: null,\n            preRequisite: {},\n            formData: {},\n            formErrors: {},\n            editing : false,\n            isLoading : false,\n            initialFormData: null,\n            getInitialDataCalled: false,\n            initUrl: '',\n            fallBackRoute: 'appDashboard',\n            headerButtons: null,\n            headerLinks: null,\n            uploaderConfig: { \n                module: '',\n                token: '',\n                allowedExtensions: '',\n                maxNoOfFiles: 5,\n                uuid: uuid(),\n            },\n        }\n    },\n    watch: {\n        $route(val, oldVal) {\n            if(oldVal.params.uuid !== val.params.uuid) {\n                this.isLoading = true\n                this.uuid = val.params.uuid\n                if(this.getInitialDataCalled) {\n                    this.getInitialData()\n                }\n            }\n        },\n    },\n    computed: {\n        ...mapGetters('config', [\n            'vars',\n        ]),\n        ...mapGetters('user', [\n            'hasPermission',\n        ]),\n    },\n    methods: {\n        ...mapActions('common', [\n            'Init',\n            'InitSub',\n            'Get',\n            'GetList',\n            'Destroy',\n            'SetMeta',\n            'SetFilters',\n            'Custom',\n            'GetPreRequisite',\n            'ResetFilters',\n            'Update',\n        ]),\n        ...mapActions('config', [\n            'SetUiConfig',\n            'SetConfig',\n        ]),\n        fillPreRequisite(response) {\n            this.preRequisite.objForEach((value, key) => {\n                this.preRequisite[key] = response[key] || value\n            })\n        },\n        setEntityData(response) {\n            if(this.entityKey && response.hasOwnProperty(this.entityKey)) {\n                this.entity = response[this.entityKey]\n            } else {\n                this.entity = response\n            }\n        },\n        setUploaderConfig(uploadConfig) {\n            this.uploaderConfig.objForEach((value, key) => {\n                this.uploaderConfig[key] = uploadConfig[key] || value\n            })\n        },\n        async getPreRequisite(callbackFn) {\n            this.isLoading = true\n            try {\n                let response = await this.GetPreRequisite()\n                this.fillPreRequisite(response)\n\n                if(_.isObject(response) && response.hasOwnProperty('uploadConfig')) {\n                    this.setUploaderConfig(response.uploadConfig)\n                }\n\n                if (typeof this.afterGetPreRequisite === \"function\") { \n                    this.afterGetPreRequisite()\n                }\n                \n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn()\n                    })\n                }\n                \n                this.isLoading = false\n                return response\n            } catch (error) {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n            }\n        },\n        async getInitialData(callbackFn) {\n            this.isLoading = true\n            this.getInitialDataCalled = true\n            try {\n                let response = await this.Get({ uuid: this.uuid })\n                this.setEntityData(response)\n\n                if (typeof this.afterGetInitialData === \"function\") { \n                    this.afterGetInitialData()\n                }\n                \n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn()\n                    })\n                }\n                \n                this.isLoading = false\n                return response\n            } catch (error) {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n                this.$router.push({ name: this.fallBackRoute })\n            }\n        },\n        getHeaderOptions() {\n            let buttons = []\n            if (this.routesRequired && this.routesRequired.add) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.add) {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add, this.permissionsRequired.add))\n                } else if (this.permissionsRequired) {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add, this.permissionsRequired))\n                }\n            }\n\n            if (this.headerButtons) {\n                buttons = buttons.concat(this.headerButtons)\n            }\n\n            let links = []\n            links.push(headerMixins.printOption())\n            links.push(headerMixins.exportPdfOption())\n\n            if (this.headerLinks) {\n                links = links.concat(this.headerLinks)\n            }\n\n            return {\n                hideLinks: this.hideHeaderLinks || false,\n                buttons,\n                links,\n                title: this.pageTitle || '',\n                subTitle: this.pageTitle ? this.subTitle || '' : '',\n            }\n        },\n        getKeyBindingOptions() {\n            let opts = {\n                ...headerMixins.commonKeyBindings\n            }\n            if (this.routesRequired && this.routesRequired.add) {\n                opts['key_a'] = this.routesRequired.add\n            }\n            if (this.routesRequired && this.routesRequired.edit) {\n                opts['key_e'] = this.routesRequired.edit\n            }\n            return opts\n        },\n        applyPageHeader() {\n            let pageHeaderOptions = Object.assign({}, this.getHeaderOptions(), this.header || {})\n            let keyBindings = Object.assign({}, this.getKeyBindingOptions(), this.keyBindings || {})\n\n            this.SetUiConfig({\n                pageHeader: pageHeaderOptions,\n            })\n            this.SetConfig({\n                keyBindings: keyBindings,\n            })\n        },\n        async export (options) {\n            this.isLoading = true\n            this.$printComponent('printable', { title: `Printing ${this.dataTitle || ''}` })\n            this.isLoading = false\n        },\n        doInit() {\n            this.Init({ url: this.initUrl })\n        \n            if(this.subInitUrl) {\n                this.InitSub({ url: (this.subUuid ? this.subUuid + '/' : '') + this.subInitUrl })\n            }\n            \n            this.getInitialData()\n            this.applyPageHeader()\n        },\n    },\n    mounted() {\n        EventBus.$off('EXPORT', this.export)\n        EventBus.$on('EXPORT', this.export)\n\n        if (this.$route.params.uuid) {\n            this.uuid = this.$route.params.uuid\n        }\n        if (this.$route.params.subUuid) {\n            this.subUuid = this.$route.params.subUuid\n        }\n        this.doInit()\n    },\n    destroyed() {\n        EventBus.$off('EXPORT', this.export)\n    },\n    beforeRouteEnter(to, from, next) {\n        if (!to.params.uuid) {\n            next({ name: from })\n        } else {\n            next()\n        }\n    },\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAfA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AATA;AAWA;AAQA;AAkBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AADA;AAAA;AAAA;AAuBA;AACA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AAAA;AACA;AALA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AADA;AAAA;AAAA;AAoBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAGA;AA3IA;AA4IA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA1JA;AA4JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhOA;;;;A","sourceRoot":""}