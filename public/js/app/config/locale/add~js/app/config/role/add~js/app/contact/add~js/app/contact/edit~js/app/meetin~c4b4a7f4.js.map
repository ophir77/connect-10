{"version":3,"file":"js/app/config/locale/add~js/app/config/role/add~js/app/contact/add~js/app/contact/edit~js/app/meetin~c4b4a7f4.js?id=20503a7b71eb51602cf6","sources":["webpack:///./resources/js/core/utils/templater.js","webpack:///./resources/js/mixins/form.js"],"sourcesContent":["import moment from 'moment'\n\nexport const templateStrings = {\n    'DAY_OF_MONTH': {\n        code: '%DAY_OF_MONTH%',\n        example: 'Ex. 1-31',\n        outputFormat: 'moment',\n        output: 'DD',\n    },\n    'DAY_OF_YEAR': {\n        code: '%DAY_OF_YEAR%',\n        example: 'Ex. 1-365',\n        outputFormat: 'moment',\n        output: 'DDDD',\n    },\n    'YEAR': { \n        code: '%YEAR%',\n        example: 'Ex. 2020',\n        outputFormat: 'moment',\n        output: 'YYYY',\n    },\n    'YEAR_SHORT': { \n        code: '%YEAR_SHORT%',\n        example: 'Ex. 20',\n        outputFormat: 'moment',\n        output: 'YY',\n    },\n    'MONTH': { \n        code: '%MONTH%',\n        example: 'Ex. JANUARY',\n        outputFormat: 'moment',\n        output: 'MMMM',\n    },\n    'MONTH_SHORT': { \n        code: '%MONTH_SHORT%',\n        example: 'Ex. JAN',\n        outputFormat: 'moment',\n        output: 'MMM',\n    },\n    'MONTH_NUMBER': { \n        code: '%MONTH_NUMBER%',\n        example: 'Ex. 1 - 12',\n        outputFormat: 'moment',\n        output: 'MM',\n    },\n    'DAY': { \n        code: '%DAY%',\n        example: 'Ex. MONDAY',\n        outputFormat: 'moment',\n        output: 'dddd',\n    },\n    'DAY_SHORT': { \n        code: '%DAY_SHORT%',\n        example: 'Ex. MON',\n        outputFormat: 'moment',\n        output: 'ddd',\n    },\n    'DAY_NUMBER': { \n        code: '%DAY_NUMBER%',\n        example: 'Ex. 1 - 7',\n        outputFormat: 'moment',\n        output: 'E',\n    },\n    'DATE': { \n        code: '%DATE%',\n        example: 'Ex. 31-08-1987',\n        outputFormat: 'moment',\n        output: 'YYYY',\n    },\n    'TIME': { \n        code: '%DATE%',\n        example: 'Ex. 23:59',\n        outputFormat: 'moment',\n        output: 'mm',\n    },\n}\n\nconst allTagRegex = /%(.*?)%/g;\n\nexport function build(content) {\n    const placeholders = content.match(allTagRegex)\n    templateStrings.objForEach((placeholder, key) => {\n        const regex = new RegExp(placeholder.code, 'g')\n\n        if(placeholder.outputFormat === 'moment') {\n            const toReplaceWith = moment().format(placeholder.output)\n            content = content.replace(regex, toReplaceWith)\n        }\n    })\n    return content\n}\n","import * as headerMixins from './header'\nimport FileUploader from '@components/FileUploader'\nimport { numberPadding } from '@core/utils'\nimport * as templater from '@core/utils/templater'\nimport { mapGetters, mapActions } from 'vuex'\nimport EventBus from '@js/event-bus'\n\nexport default {\n    components: {\n        FileUploader,\n    },\n    props: {\n        editData: {\n            type: Object\n        },\n        isFetching: {\n            type: Boolean,\n            default: false\n        },\n        duplicate: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            uuid: null,\n            subUuid: null,\n            formData: {},\n            formErrors: {},\n            formLabels: {},\n            customFilters: {},\n            initianLength: 0,\n            initialFormData: null,\n            emptyFormData: null,\n            preRequisite: {},\n            keepAdding: false,\n            keepAddingOption: 'clear_all',\n            keepAddingSelectedFields: null,\n            keepAddingFields: [],\n            isLoading: true,\n            getInitialDataCalled: false,\n            doInitBeforeGetInitialData: false,\n            initUrl: '',\n            initSubUrl: null,\n            dataType: null,\n            uploaderConfig: { \n                module: '',\n                token: '',\n                allowedExtensions: '',\n                maxNoOfFiles: 5,\n                uuid: uuid(),\n            },\n            headerButtons: null,\n        }\n    },\n    computed: {\n        ...mapGetters('config', [\n            'configs',\n            'vars',\n        ]),\n        showKeepAdding() {\n            return !this.editData || this.duplicate\n        },\n        codePrefix() {\n            return this.formData.codePrefix\n        },\n        lastCodeObj() {\n            return this.preRequisite.codes.find(v => v.codePrefix === this.formData.codePrefix)\n        }\n    },\n    watch: {\n        editData(value) {\n            if(value) {\n                this.formData = Object.assign({}, this.formData, _.cloneDeep(value))\n                this.uuid = this.formData.uuid\n                this.uploaderConfig.token = this.formData.token\n                if (typeof this.addNewRow === \"function\" && typeof this.addNewRowIfNone === \"function\") { \n                    this.addNewRowIfNone()\n                }\n                this.initialFormData = _.cloneDeep(this.formData)\n                if (typeof this.afterEditData === \"function\") { \n                    this.afterEditData()\n                }\n                if(this.duplicate) {\n                    this.computeCodeNumber(this.formData.codePrefix)\n                }\n            }\n        },\n        codePrefix: function() {\n            this.computeCodeNumber()\n        },\n    },\n    methods: {\n        ...mapActions('common', [\n            'Init',\n            'InitSub',\n            'Get',\n            'Store',\n            'Update',\n            'GetPreRequisite',\n            'Destroy',\n            'Custom',\n        ]),\n        ...mapActions('config', [\n            'SetUiConfig',\n            'SetConfig',\n        ]),\n        computeCodeNumber() {\n            if(this.preRequisite.codes && this.showKeepAdding) {\n                const codeObj = this.lastCodeObj\n                const codeDigit = this.configs[this.dataType].codeDigit\n\n                if (this.lastCodeObj) {\n                    this.formData.codeNumber = this.numberPadding(this.lastCodeObj.codeNumber + 1, codeDigit)\n                } else {\n                    this.formData.codeNumber = this.numberPadding(1, codeDigit)\n                }\n            }\n        },\n        numberPadding(exNumber = 1, codeDigit) {\n            return numberPadding(exNumber, codeDigit || this.configs[this.dataType].codeDigit)\n        },\n        doNothing() {\n\n        },\n        submit() {\n            if(formUtil.isUnchanged(this.initialFormData, this.formData)) {\n                this.$toasted.info(this.$t('general.nothing_changed'), this.$toastConfig.info)\n                return false\n            }\n            this.doInit()\n            this.doInitSub()\n\n            this.isLoading = true\n            \n            if(this.duplicate) {\n                this.formData.uuid = null\n            }\n\n            const saveData = this.formData.uuid ? this.Update : this.Store\n\n            saveData(this.formData)\n                .then(response => {\n                    this.$toasted.success(response.message, this.$toastConfig)\n\n                    if (typeof this.afterSubmit === \"function\") { \n                        this.afterSubmit(response)\n                    } else {\n                        if (this.keepAdding) {\n                            this.uploaderConfig.uuid = uuid()\n                            this.formData = formUtil.clearFormConditionally(this.formData, this.initialFormData, this.keepAddingOption, this.keepAddingSelectedFields)\n                            if(this.getInitialDataCalled) {\n                                this.getInitialData()\n                            }\n                        } else {\n                            this.initialFormData = _.cloneDeep(this.formData)\n                            this.$router.back()\n                        }\n                    }\n\n                    this.isLoading = false\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    this.formErrors = formUtil.handleErrors(error)\n                })\n        },\n        reset() {\n            formUtil.confirmAction()\n                .then((result) => {\n                    if (result.value) {\n                        this.formData = Object.assign({}, this.formData, _.cloneDeep(this.initialFormData))\n                    }\n                })\n        },\n        unsavedCheck(next) {\n            formUtil.unsavedCheckAlert(this.initialFormData, this.formData, next)\n        },\n        fillPreRequisite(response) {\n            this.preRequisite.objForEach((value, key) => {\n                this.preRequisite[key] = response[key] || value\n            })\n        },\n        setUploaderConfig(uploadConfig) {\n            this.uploaderConfig.objForEach((value, key) => {\n                this.uploaderConfig[key] = uploadConfig[key] || value\n            })\n        },\n        async getInitialData(callbackFn) {\n            this.isLoading = true\n            this.getInitialDataCalled = true\n            try {\n                if(this.doInitBeforeGetInitialData) {\n                    this.doInit()\n                }\n\n                const response = await this.GetPreRequisite(this.customFilters)\n\n                if(this.doInitBeforeGetInitialData) {\n                    this.doInitSub()\n                }\n                \n                this.fillPreRequisite(response)\n                \n                if(response['uploadConfig']) {\n                    this.setUploaderConfig(response['uploadConfig'])\n                }\n\n                if (typeof this.addNewRow === \"function\" && typeof this.addNewRowIfNone === \"function\") { \n                    this.$nextTick(() => {\n                        this.addNewRowIfNone()\n                    })\n                }\n                \n                if(this.configs[this.dataType]) {\n                    this.$nextTick(() => {\n                        this.formData.codePrefix = templater.build(this.configs[this.dataType].codePrefix)\n                    })\n                }\n                \n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn()\n                    })\n                }\n                this.isLoading = false\n                return response\n            } catch (error) {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n                throw error\n            }\n        },\n        getEntityData() {\n            this.isLoading = true\n            this.Get(this.formData.uuid)\n                .then(res => {\n                    this.formData.objForEach((value, key) => {\n                        this.formData[key] = res[key] || null\n                    })\n                    this.initialFormData = _.cloneDeep(this.formData)\n                    this.isLoading = false\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    formUtil.handleErrors(error)\n                })\n        },\n        addTag(newTag) {\n            const tag = {\n                name: newTag,\n                slug: formUtil.generateSlug(newTag)\n            }\n            this.preRequisite.tags.push(tag)\n            this.formData.tags.push(tag)\n        },\n        newModalClose(storedData) {\n            this.doInit()\n            this.doInitSub()\n\n            if(storedData) {\n                const processStoredData = () => {\n                    const putFormData = (val) => {\n                        if(storedData.push) {\n                            this.formData[storedData.dataTypeArr].push(val)\n                        } else {\n                            this.formData[storedData.dataType] = val\n                        }\n                    }\n\n                    this.isLoading = true\n                    if(storedData.dataType) {\n\n                        if(storedData.dontMatch) {\n                            putFormData(storedData)\n                        } else if(storedData.dataTypeArr && storedData.propertyToMatch) {\n                            putFormData(this.preRequisite[storedData.dataTypeArr].find(v => v[storedData.propertyToMatch] === storedData[storedData.propertyToMatch]) || null)\n                        }\n                    }\n                    this.isLoading = false\n                }\n\n                if(this.getInitialDataCalled) {\n                    this.getInitialData(processStoredData)\n                } else {\n                    processStoredData()\n                }\n            }\n        },\n        getHeaderOptions() {\n            let buttons = []\n            if (this.headerButtons) {\n                buttons = buttons.concat(this.headerButtons)\n            }\n\n            let links = []\n            links.push(headerMixins.printOption())\n            links.push(headerMixins.exportPdfOption())\n\n            return {\n                hideLinks: this.hideHeaderLinks || false,\n                buttons,\n                links,\n                title: this.pageTitle || '',\n                subTitle: this.pageTitle ? this.subTitle || '' : '',\n            }\n        },\n        getKeyBindingOptions() {\n            let opts = {\n                ...headerMixins.commonKeyBindings\n            }\n            return opts\n        },\n        applyPageHeader() {\n            let pageHeaderOptions = Object.assign({}, this.getHeaderOptions(), this.header || {})\n            let keyBindings = Object.assign({}, this.getKeyBindingOptions(), this.keyBindings || {})\n\n            this.SetUiConfig({\n                pageHeader: pageHeaderOptions,\n            })\n            this.SetConfig({\n                keyBindings: keyBindings,\n            })\n        },\n        async export (options) {\n            this.isLoading = true\n            this.$printComponent('printable', { title: `Printing ${this.dataTitle || ''}` })\n            this.isLoading = false\n        },\n        doInitSub() {\n            if(this.initSubUrl) {\n                this.InitSub({ url: (this.subUuid ? this.subUuid + '/' : '') + this.initSubUrl })\n            }\n        },\n        doInit() {\n            this.Init({ url: this.initUrl })\n        }\n    },\n    mounted() {\n        EventBus.$off('ROUTE_LEAVING', this.unsavedCheck)\n        EventBus.$on('ROUTE_LEAVING', this.unsavedCheck)\n        if (this.$route.params.subUuid) {\n            this.subUuid = this.$route.params.subUuid\n        }\n\n        this.doInit()\n        this.doInitSub()\n        \n        this.uploaderConfig.token = this.formData.token\n        this.initialFormData = _.cloneDeep(this.formData)\n    },\n    created() {\n        if(this.formLabels) {\n            this.formLabels.objForEach((value, key) => {\n                this.keepAddingFields.push({\n                    uuid: key,\n                    value: value\n                })\n            })\n        }\n    },\n    beforeDestroy () {\n        delete this.formData\n        delete this.formErrors\n        delete this.formLabels\n        delete this.preRequisite\n        delete this.keepAddingFields\n    },\n    destroyed() {\n        EventBus.$off('ROUTE_LEAVING', this.unsavedCheck)\n    },\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAnEA;AA2EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AA5BA;AA8BA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AAerCA;AACA;AADA;AAAA;AAAA;AAwCA;AACA;AAzCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAvOA;AAwOA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AApPA;AAsPA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5WA;;;;A","sourceRoot":""}