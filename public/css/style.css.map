{"version":3,"file":"/css/style.css","sources":["webpack:///./resources/sass/style.scss","webpack:///./node_modules/bootstrap/scss/mixins/_breakpoints.scss","webpack:///./node_modules/bootstrap/scss/vendor/_rfs.scss","webpack:///./node_modules/bootstrap/scss/mixins/_box-shadow.scss","webpack:///ws (ignored)"],"sourcesContent":["body,\nhtml,\n#root {\n    height: 100%;\n    min-height: 100%;\n}\n\nbody {\n    font-size: 14px;\n}\n\n@import \"~bootstrap/scss/functions\";\n@import \"../js/core/assets/scss/partials/functions\";\n\n@import \"../js/core/assets/scss/partials/variables\";\n@import \"~bootstrap/scss/variables\";\n\n@import \"~bootstrap/scss/mixins\";\n@import \"../js/core/assets/scss/partials/mixins\";\n\n@import '../js/core/assets/scss/partials/_palettes.scss';\n\n.sidebar {\n    &.right-sidebar {\n        display: block;\n        left: auto;\n        right: 0;\n        width: $sidebar-width;\n        transform: translate3d($sidebar-width, 0, 0);\n\n        .right-sidebar-inner {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 100%;\n            overflow: auto;\n            width: $sidebar-width + 20px;\n            background: #ffffff;\n        }\n    }\n}\n\n.show-from-right {\n    transform: translate3d($sidebar-width, 0, 0);\n}\n\n@include media-breakpoint-up(lg) {\n\n    .sidebar {\n        &.right-sidebar {\n            width: $sidebar-width-lg;\n            transform: translate3d($sidebar-width-lg, 0, 0);\n\n            .right-sidebar-inner {\n                width: $sidebar-width-lg + 20px;\n                background: #ffffff;\n            }\n\n            .right-sidebar-content {\n                width: 100%;\n                text-align: left;\n\n                .sidebar-heading {\n                    padding: 20px;\n                    margin-bottom: 0;\n                }\n\n                .tab-content {\n                    text-align: left;\n                    padding: 10px;\n                }\n\n                .color-block {\n                    display: block;\n                    height: 30px;\n                    width: 30px;\n                    float: left;\n                    margin: 0 10px 5px 0;\n                    cursor: pointer;\n                }\n\n                .list-group-item-title {\n                    @include font-size(13px);\n                    font-weight: 400;\n                }\n\n                .list-group-item-colors {\n                    padding: 20px 15px;\n                }\n            }\n        }\n    }\n\n    [data-sidebar-right-shadow=\"true\"] {\n        .right-sidebar {\n            @include box-shadow($box-shadow);\n        }\n    }\n\n    [data-sidebar-right-height=\"full\"] {\n        .right-sidebar {\n            top: 0;\n            height: 100%;\n            z-index: $zindex-navbar-fixed + 8;\n        }\n    }\n\n    [data-sidebar-right-height=\"normal\"] {\n        .right-sidebar {\n            top: $navbar-height;\n            height: calc(100%);\n            z-index: $zindex-navbar-fixed + 8;\n        }\n\n        .backdrop-right-sidebar {\n            top: $navbar-height;\n        }\n    }\n\n    [data-sidebar-right-backdrop-color=\"transparent\"] {\n        .backdrop-right-sidebar {\n            background: transparent !important;\n        }\n    }\n\n    [data-sidebar-right-backdrop-color=\"dark\"] {\n        .backdrop-right-sidebar {\n            background: rgba(0, 0, 0, 0.3) !important;\n        }\n    }\n\n    [data-sidebar-right-backdrop-color=\"light\"] {\n        .backdrop-right-sidebar {\n            background: rgba(255, 255, 255, 0.7) !important;\n        }\n    }\n\n    [data-sidebar-right-show=\"true\"] {\n        .right-sidebar {\n            transform: translate3d(0, 0, 0);\n        }\n\n        &[data-sidebar-right-height=\"normal\"] {\n\n            &[data-sidebar-right-style=\"push\"] {\n                .main {\n                    padding-right: $sidebar-width + $side-margin;\n                }\n            }\n\n            &[data-sidebar-right-style=\"off-canvas\"] {\n                .main {\n                    transform: translate3d(-$sidebar-width, 0, 0);\n                    width: 100%;\n                }\n\n                .left-sidebar {\n                    transform: translate3d(-$sidebar-width, 0, 0);\n                }\n\n                .backdrop-right-sidebar {\n                    opacity: 1;\n                    transform: translate3d(0, 0px, 0px);\n                    transition: opacity 0.3s;\n                }\n            }\n        }\n\n        &[data-sidebar-right-height=\"full\"] {\n            &[data-sidebar-right-style=\"push\"] {\n\n                .navbar,\n                .main {\n                    padding-right: $sidebar-width + $side-margin;\n                }\n            }\n\n            &[data-sidebar-right-style=\"off-canvas\"] {\n\n                .navbar,\n                .main {\n                    transform: translate3d(-$sidebar-width, 0, 0);\n                    width: 100%;\n                }\n\n                .left-sidebar {\n                    transform: translate3d(-$sidebar-width, 0, 0);\n                }\n\n                .backdrop-right-sidebar {\n                    opacity: 1;\n                    transform: translate3d(0, 0px, 0px);\n                    transition: opacity 0.3s;\n                }\n            }\n        }\n\n        &[data-sidebar-right-style=\"over\"] {\n            .navbar {\n                left: 0;\n                width: 100%;\n            }\n\n            .backdrop-right-sidebar {\n                opacity: 1;\n                transform: translate3d(0, 0px, 0px);\n                transition: opacity 0.3s;\n            }\n        }\n    }\n}\n\n@each $key,\n$value in $default-palette {\n    [data-sidebar-right-color=\"#{$key}\"] {\n        .right-sidebar-content {\n            background: map-get($value, \"background-color\");\n            color: map-get($value, \"foreground-color\");\n\n            a {\n                color: map-get($value, \"foreground-color\");\n            }\n        }\n    }\n}\n\n.content-wrapper {\n    min-height: 200px;\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated font-resizing\n//\n// See https://github.com/twbs/rfs\n\n// Configuration\n\n// Base font size\n$rfs-base-font-size: 1.25rem !default;\n$rfs-font-size-unit: rem !default;\n\n// Breakpoint at where font-size starts decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n// Resize font-size based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != \"number\" or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-responsive-font-sizes to false\n$enable-responsive-font-sizes: true !default;\n\n// Cache $rfs-base-font-size unit\n$rfs-base-font-size-unit: unit($rfs-base-font-size);\n\n// Remove px-unit from $rfs-base-font-size for calculations\n@if $rfs-base-font-size-unit == \"px\" {\n  $rfs-base-font-size: $rfs-base-font-size / ($rfs-base-font-size * 0 + 1);\n}\n@else if $rfs-base-font-size-unit == \"rem\" {\n  $rfs-base-font-size: $rfs-base-font-size / ($rfs-base-font-size * 0 + 1 / $rfs-rem-value);\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == \"px\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == \"rem\" or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);\n}\n\n// Responsive font-size mixin\n@mixin rfs($fs, $important: false) {\n  // Cache $fs unit\n  $fs-unit: if(type-of($fs) == \"number\", unit($fs), false);\n\n  // Add !important suffix if needed\n  $rfs-suffix: if($important, \" !important\", \"\");\n\n  // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n  @if not $fs-unit or $fs-unit != \"\" and $fs-unit != \"px\" and $fs-unit != \"rem\" or $fs == 0 {\n    font-size: #{$fs}#{$rfs-suffix};\n  }\n  @else {\n    // Variables for storing static and fluid rescaling\n    $rfs-static: null;\n    $rfs-fluid: null;\n\n    // Remove px-unit from $fs for calculations\n    @if $fs-unit == \"px\" {\n      $fs: $fs / ($fs * 0 + 1);\n    }\n    @else if $fs-unit == \"rem\" {\n      $fs: $fs / ($fs * 0 + 1 / $rfs-rem-value);\n    }\n\n    // Set default font-size\n    @if $rfs-font-size-unit == rem {\n      $rfs-static: #{$fs / $rfs-rem-value}rem#{$rfs-suffix};\n    }\n    @else if $rfs-font-size-unit == px {\n      $rfs-static: #{$fs}px#{$rfs-suffix};\n    }\n    @else {\n      @error \"`#{$rfs-font-size-unit}` is not a valid unit for $rfs-font-size-unit. Use `px` or `rem`.\";\n    }\n\n    // Only add media query if font-size is bigger as the minimum font-size\n    // If $rfs-factor == 1, no rescaling will take place\n    @if $fs > $rfs-base-font-size and $enable-responsive-font-sizes {\n      $min-width: null;\n      $variable-unit: null;\n\n      // Calculate minimum font-size for given font-size\n      $fs-min: $rfs-base-font-size + ($fs - $rfs-base-font-size) / $rfs-factor;\n\n      // Calculate difference between given font-size and minimum font-size for given font-size\n      $fs-diff: $fs - $fs-min;\n\n      // Base font-size formatting\n      // No need to check if the unit is valid, because we did that before\n      $min-width: if($rfs-font-size-unit == rem, #{$fs-min / $rfs-rem-value}rem, #{$fs-min}px);\n\n      // If two-dimensional, use smallest of screen width and height\n      $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n      // Calculate the variable width between 0 and $rfs-breakpoint\n      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}#{$variable-unit};\n\n      // Set the calculated font-size.\n      $rfs-fluid: calc(#{$min-width} + #{$variable-width}) #{$rfs-suffix};\n    }\n\n    // Rendering\n    @if $rfs-fluid == null {\n      // Only render static font-size if no fluid font-size is available\n      font-size: $rfs-static;\n    }\n    @else {\n      $mq-value: null;\n\n      // RFS breakpoint formatting\n      @if $rfs-breakpoint-unit == em or $rfs-breakpoint-unit == rem {\n        $mq-value: #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit};\n      }\n      @else if $rfs-breakpoint-unit == px {\n        $mq-value: #{$rfs-breakpoint}px;\n      }\n      @else {\n        @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n      }\n\n      @if $rfs-class == \"disable\" {\n        // Adding an extra class increases specificity,\n        // which prevents the media query to override the font size\n        &,\n        .disable-responsive-font-size &,\n        &.disable-responsive-font-size {\n          font-size: $rfs-static;\n        }\n      }\n      @else {\n        font-size: $rfs-static;\n      }\n\n      @if $rfs-two-dimensional {\n        @media (max-width: #{$mq-value}), (max-height: #{$mq-value}) {\n          @if $rfs-class == \"enable\" {\n            .enable-responsive-font-size &,\n            &.enable-responsive-font-size {\n              font-size: $rfs-fluid;\n            }\n          }\n          @else {\n            font-size: $rfs-fluid;\n          }\n\n          @if $rfs-safari-iframe-resize-bug-fix {\n            // stylelint-disable-next-line length-zero-no-unit\n            min-width: 0vw;\n          }\n        }\n      }\n      @else {\n        @media (max-width: #{$mq-value}) {\n          @if $rfs-class == \"enable\" {\n            .enable-responsive-font-size &,\n            &.enable-responsive-font-size {\n              font-size: $rfs-fluid;\n            }\n          }\n          @else {\n            font-size: $rfs-fluid;\n          }\n\n          @if $rfs-safari-iframe-resize-bug-fix {\n            // stylelint-disable-next-line length-zero-no-unit\n            min-width: 0vw;\n          }\n        }\n      }\n    }\n  }\n}\n\n// The font-size & responsive-font-size mixin uses RFS to rescale font sizes\n@mixin font-size($fs, $important: false) {\n  @include rfs($fs, $important);\n}\n\n@mixin responsive-font-size($fs, $important: false) {\n  @include rfs($fs, $important);\n}\n","@mixin box-shadow($shadow...) {\n  @if $enable-shadows {\n    $result: ();\n\n    @if (length($shadow) == 1) {\n      // We can pass `@include box-shadow(none);`\n      $result: $shadow;\n    } @else {\n      // Filter to avoid invalid properties for example `box-shadow: none, 1px 1px black;`\n      @for $i from 1 through length($shadow) {\n        @if nth($shadow, $i) != \"none\" {\n          $result: append($result, nth($shadow, $i), \"comma\");\n        }\n      }\n    }\n    @if (length($result) > 0) {\n      box-shadow: $result;\n    }\n  }\n}\n","/* (ignored) */"],"mappings":",kFAAA;;;AAGA;AACA;AAKA;AACA;AAHA;AACA;AAKA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAPA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAUA;AACA;AARA;AACA;ACwBA;ADZA;AAEA;AACA;AAVA;AACA;AAMA;AAMA;AACA;AATA;AACA;AACA;AAWA;AACA;AATA;AACA;AAJA;AAeA;AACA;AARA;AACA;AATA;AAoBA;AACA;AARA;AACA;AAdA;AAyBA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAvBA;AE+EA;AF5CA;AARA;AACA;AA5BA;AAuCA;AARA;AACA;AATA;AGvDA;AHmEA;AACA;AAVA;AA2BA;AACA;AACA;AAdA;AACA;AAXA;AA8BA;AACA;AACA;AAhBA;AACA;AAZA;AA+BA;AAhBA;AACA;AAbA;AAkCA;AAlBA;AACA;AAdA;AAqCA;AApBA;AACA;AAfA;AAwCA;AAtBA;AACA;AAhBA;AA2CA;AAxBA;AACA;AAjBA;AA+CA;AA3BA;AACA;AAlBA;AAkDA;AACA;AA7BA;AACA;AAnBA;AAmDA;AA7BA;AACA;AApBA;AAoDA;AACA;AACA;AA7BA;AACA;AArBA;;AA2DA;AAlCA;AACA;AAtBA;;AA+DA;AACA;AArCA;AACA;AAvBA;AA+DA;AArCA;AACA;AAxBA;AAgEA;AACA;AACA;AArCA;AACA;AAzBA;AAoEA;AACA;AAxCA;AACA;AA1BA;AAqEA;AACA;AACA;AAxCA;AACA;AACA;AA1BA;AA0EA;AACA;AA7CA;AACA;AA1BA;AAyEA;AA5CA;AACA;AA1BA;AAiEA;AACA;AApCA;AACA;AA1BA;AAgEA;AAnCA;AACA;AA1BA;AAwDA;AACA;AA3BA;AACA;AA1BA;AAuDA;AA1BA;AACA;AA1BA;AA+CA;AACA;AAlBA;AACA;AA1BA;AA8CA;AAjBA;AACA;AA1BA;AAsCA;AACA;AATA;AACA;AA1BA;AAqCA;AARA;AACA;AA1BA;AA6BA;AACA;AAAA;AACA;AA1BA;AA4BA;AACA;AACA;AA1BA;AAoBA;AACA;AASA;AACA;AA1BA;AAmBA;AAUA;AACA;AA1BA;AAWA;AACA;AAkBA;AACA;AA1BA;AAUA;AAmBA;AACA;AA1BA;AAEA;AACA;AA2BA;AACA;AA1BA;AACA;AA4BA;AACA;AA1BA;AAPA;AACA;AAoCA;AACA;AA1BA;AARA;AAqCA;AACA;AA1BA;AAhBA;AACA;AA6CA;AACA;AA1BA;AAjBA;AA8CA;AACA;AA1BA;AAzBA;AACA;AAsDA;AACA;AA1BA;AA1BA;AAuDA;AACA;AA1BA;AAlCA;AACA;AA+DA;AACA;AA1BA;AAnCA;AAgEA;AACA;AA1BA;AA3CA;AACA;AAwEA;AACA;AA1BA;AA5CA;AAyEA;AACA;AA1BA;AApDA;AACA;AAiFA;AACA;AA1BA;AArDA;AAkFA;AACA;AA1BA;AA7DA;AACA;AA0FA;AACA;AA1BA;AA9DA;AA2FA;AACA;AA1BA;AAtEA;AACA;AAmGA;AACA;AA1BA;AAvEA;AAoGA;AACA;AA/FA;AACA;AAiGA;AACA;AIrUA","sourceRoot":""}